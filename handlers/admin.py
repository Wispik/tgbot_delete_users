from aiogram import types
from aiogram.dispatcher import FSMContext

import db.database as db
from states import AppStates
from settings import bot
import keyboards as kb


async def start_command(
    message: types.Message,
    state: FSMContext
):
    await state.reset_data()
    await state.reset_state()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.kb_main)


async def add_channel_step1_command(
    message: types.Message,
    state: FSMContext
):
    await state.set_state(AppStates.STATE_WAIT_CHANNEL_ID)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞')


async def add_channel_step2_command(
    message: types.Message,
    state: FSMContext
):
    await state.set_data({'channel_id': int(message.text)})
    await state.set_state(AppStates.STATE_WAIT_CHANNEL_TG_ID)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ JSON ID –∫–∞–Ω–∞–ª–∞')


async def add_channel_step3_command(
    message: types.Message,
    state: FSMContext
):
    _channel = await db.get_channel_by_tg_id(int(message.text))
    if _channel:
        await message.answer(f'–ö–∞–Ω–∞–ª JSON ID: {message.text} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
        return
    await state.update_data({'tg_id': int(message.text)})
    await state.set_state(AppStates.STATE_WAIT_CHANNEL_LINK)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞')


async def add_channel_step4_command(
    message: types.Message,
    state: FSMContext
):
    state_data = await state.get_data()
    await db.create_channel(
        state_data['channel_id'],
        state_data['tg_id'],
        message.text,
    )
    await message.answer(f"–ö–∞–Ω–∞–ª ID: {state_data['channel_id']} LINK: {message.text} - –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.reset_data()
    await state.reset_state()


async def information_command(
    message: types.Message
):
    channels = await db.get_all_channels()
    _kb = kb.kb_channels(channels)
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:', reply_markup=_kb)


async def channel_info_callback(
    callback_query: types.CallbackQuery
):
    channel_id = int(callback_query.data.split('_')[1])
    channel = await db.get_channel_by_id(channel_id)
    text = f"""
        {channel_id} {channel['link']}\n–°—Ç–∞—Ç—É—Å: {'‚ùáÔ∏è –ê–∫—Ç–∏–≤–Ω–∞' if channel['active'] else 'üõë –ù–µ –∞–∫—Ç–∏–≤–Ω–∞ '}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {channel['count_deleted_users']} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    """
    await bot.send_message(
        callback_query.message.chat.id,
        text,
        reply_markup=kb.kb_change_channel_active(channel_id)
    )
    print(channel['start'])


async def channel_change_status_callback(
    callback_query: types.CallbackQuery
):
    channel_id = int(callback_query.data.split('_')[2])
    new_status = callback_query.data.split('_')[1] == 'active'
    await db.change_channel_status(channel_id, new_status)
    await bot.send_message(callback_query.message.chat.id, '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!')
